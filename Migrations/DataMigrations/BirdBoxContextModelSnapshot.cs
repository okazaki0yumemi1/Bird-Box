// <auto-generated />
using System;
using Bird_Box.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Bird_Box.Migrations.DataMigrations
{
    [DbContext(typeof(BirdBoxContext))]
    partial class BirdBoxContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.18");

            modelBuilder.Entity("Bird_Box.Audio.Microphone", b =>
                {
                    b.Property<string>("objId")
                        .HasColumnType("TEXT");

                    b.Property<string>("deviceId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("deviceInfo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("objId");

                    b.ToTable("InputDevices");
                });

            modelBuilder.Entity("Bird_Box.Models.AnalyzerOptions", b =>
                {
                    b.Property<string>("objId")
                        .HasColumnType("TEXT");

                    b.Property<string>("classifier")
                        .HasColumnType("TEXT");

                    b.Property<string>("cpuThreads")
                        .HasColumnType("TEXT");

                    b.Property<string>("latitude")
                        .HasColumnType("TEXT");

                    b.Property<string>("locale")
                        .HasColumnType("TEXT");

                    b.Property<string>("longitude")
                        .HasColumnType("TEXT");

                    b.Property<string>("minimumConfidence")
                        .HasColumnType("TEXT");

                    b.Property<string>("overlapSegments")
                        .HasColumnType("TEXT");

                    b.Property<string>("processingBatchSize")
                        .HasColumnType("TEXT");

                    b.Property<string>("sensitivity")
                        .HasColumnType("TEXT");

                    b.Property<string>("slist")
                        .HasColumnType("TEXT");

                    b.Property<string>("speciesFrequencyThreshold")
                        .HasColumnType("TEXT");

                    b.Property<string>("weekOfTheYear")
                        .HasColumnType("TEXT");

                    b.HasKey("objId");

                    b.ToTable("AnalyzerOptions");
                });

            modelBuilder.Entity("Bird_Box.Models.IdentifiedBird", b =>
                {
                    b.Property<string>("objId")
                        .HasColumnType("TEXT");

                    b.Property<string>("birdName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("detectionThreshold")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("inputDeviceobjId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("recodingDate")
                        .HasColumnType("TEXT");

                    b.HasKey("objId");

                    b.HasIndex("inputDeviceobjId");

                    b.ToTable("BirdRecords");
                });

            modelBuilder.Entity("Bird_Box.Models.ListeningTask", b =>
                {
                    b.Property<string>("objId")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("Hours")
                        .HasColumnType("TEXT");

                    b.Property<string>("InputDeviceobjId")
                        .HasColumnType("TEXT");

                    b.Property<string>("OptionsobjId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("OutputFolder")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("WhenAddedDateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("objId");

                    b.HasIndex("InputDeviceobjId");

                    b.HasIndex("OptionsobjId");

                    b.ToTable("ListeningTasks");
                });

            modelBuilder.Entity("Bird_Box.Models.IdentifiedBird", b =>
                {
                    b.HasOne("Bird_Box.Audio.Microphone", "inputDevice")
                        .WithMany()
                        .HasForeignKey("inputDeviceobjId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("inputDevice");
                });

            modelBuilder.Entity("Bird_Box.Models.ListeningTask", b =>
                {
                    b.HasOne("Bird_Box.Audio.Microphone", "InputDevice")
                        .WithMany()
                        .HasForeignKey("InputDeviceobjId");

                    b.HasOne("Bird_Box.Models.AnalyzerOptions", "Options")
                        .WithMany()
                        .HasForeignKey("OptionsobjId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InputDevice");

                    b.Navigation("Options");
                });
#pragma warning restore 612, 618
        }
    }
}
